terraform:
  force: ${FORCE_REINSTALL}

global:
  addPrometheusAnnotations: true
  securityContext:
    runAsUser: 999
    runAsGroup: 999
    fsGroup: 999
    runAsNonRoot: true
  containerSecurityContext:
    runAsNonRoot: true
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    seccompProfile:
      type: RuntimeDefault
    capabilities:
      drop:
        - ALL

configs:
  params:
    application.namespaces: "${join(",", ARGOCD_APPLICATION_NAMESPACES)}"
    server.insecure: false
  cm:
    oidc.config: |
      name: Azure
      issuer: https://login.microsoftonline.com/${TENANT_ID}/v2.0
      clientID: ${APP_CLIENT_ID}
      azure:
        useWorkloadIdentity: true
      requestedIDTokenClaims:
        groups:
          essential: true
          value: "SecurityGroup"
        preferred_username:
          essential: true
        email:
          essential: true
      requestedScopes:
        - openid
        - profile
        - email
    timeout.reconciliation: 30s
    application.resourceTrackingMethod: annotation
    exec.enabled: false
    admin.enabled: true
    statusbadge.enabled: true
    url: https://argocd.internal.devopslab.pagopa.it
    server.rbac.disableApplicationFineGrainedRBACInheritance: "false"
  rbac:
    policy.default: role:guest
    policy.csv: |
      # --- Admin role
      p, role:admin, *, *, */*, allow
      p, role:admin, logs, get, */*, allow

      # --- Developer role
      p, role:developer, applications, get, */*, allow
      p, role:developer, applications, create, */*, allow
      p, role:developer, applications, update, */*, allow
      p, role:developer, applications, sync, */*, allow
      p, role:developer, applications, override, */*, allow
      p, role:developer, projects, get, *, allow
      p, role:developer, clusters, get, *, allow
      p, role:developer, repositories, get, *, allow
      p, role:developer, accounts, get, *, allow
      p, role:developer, logs, get, */*, allow

      # --- Reader role
      p, role:reader, applications, get, */*, allow
      p, role:reader, applications, logs, */*, allow
      p, role:reader, projects, get, *, allow
      p, role:reader, applications, get, */secrets, deny

      # --- Guest role
      p, role:guest, applications, get, */*, deny
      p, role:guest, projects, get, *, deny
      p, role:guest, repositories, get, *, deny
      p, role:guest, clusters, get, *, deny
      p, role:guest, accounts, get, *, deny

      # Assign users to roles
      g, ${ENTRA_ADMIN_GROUP_OBJECT_ID}, role:admin

    scopes: "[preferred_username, email, groups]"

#
# Server configuration
#
server:
  replicas: 1
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
    behavior:
      scaleDown:
        stabilizationWindowSeconds: 300
        policies:
          - type: Pods
            value: 1
            periodSeconds: 180
      scaleUp:
        stabilizationWindowSeconds: 60
        policies:
          - type: Pods
            value: 1
            periodSeconds: 60
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
  pdb:
    enabled: true
    minAvailable: 1
  resources:
    requests:
      cpu: 500m
      memory: 256Mi
    limits:
      cpu: 1000m
      memory: 1Gi
  ingress:
    enabled: true
    controller: generic
    ingressClassName: nginx
    hostname: argocd.internal.devopslab.pagopa.it
    path: /
    pathType: Prefix
    annotations:
      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/proxy-body-size: "100m"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "90"
    extraTls:
      - hosts:
          - argocd.internal.devopslab.pagopa.it
        secretName: argocd-internal-devopslab-pagopa-it

  serviceAccount:
    create: true
    annotations:
      azure.workload.identity/client-id: ${APP_CLIENT_ID}

  podLabels:
    azure.workload.identity/use: "true"

#
# Redis configuration
#
redis:
  enabled: true
  resources:
    limits:
      cpu: 200m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 64Mi
  service:
    port: 6379
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
  containerPorts:
    metrics: 9121
    redis: 6379
  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 15
    timeoutSeconds: 15
    successThreshold: 1
    failureThreshold: 5
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 15
    timeoutSeconds: 15
    successThreshold: 1
    failureThreshold: 5

#
# Controller configuration
#
controller:
  replicas: 1
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
    behavior:
      scaleDown:
        stabilizationWindowSeconds: 300
        policies:
          - type: Pods
            value: 1
            periodSeconds: 180
      scaleUp:
        stabilizationWindowSeconds: 60
        policies:
          - type: Pods
            value: 1
            periodSeconds: 60
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
  pdb:
    enabled: true
    minAvailable: 1
  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi

#
# Repo Server configuration
#
repoServer:
  replicas: 1
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
    behavior:
      scaleDown:
        stabilizationWindowSeconds: 300
        policies:
          - type: Pods
            value: 1
            periodSeconds: 180
      scaleUp:
        stabilizationWindowSeconds: 60
        policies:
          - type: Pods
            value: 1
            periodSeconds: 60
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
  pdb:
    enabled: true
    minAvailable: 1
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi

#
# Application Set configuration
#
applicationSet:
  replicas: 1
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
    behavior:
      scaleDown:
        stabilizationWindowSeconds: 300
        policies:
          - type: Pods
            value: 1
            periodSeconds: 180
      scaleUp:
        stabilizationWindowSeconds: 60
        policies:
          - type: Pods
            value: 1
            periodSeconds: 60
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
  pdb:
    enabled: true
    minAvailable: 1
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi

#
# Dex configuration
#
dex:
  enabled: false
