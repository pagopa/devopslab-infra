terraform:
  force: ${force_reinstall}
global:
  addPrometheusAnnotations: true
  securityContext:
    runAsUser: 999
    runAsGroup: 999
    fsGroup: 999
    runAsNonRoot: true
  containerSecurityContext:
    runAsNonRoot: true
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    seccompProfile:
      type: RuntimeDefault
    capabilities:
      drop:
        - ALL

configs:
  params:
    application.namespaces: "${join(",", argocd_application_namespaces)}"
    server.insecure: true  # Miglioramento: Abilitazione TLS a livello di ArgoCD

  cm:
    timeout.reconciliation: 30s
    application.resourceTrackingMethod: annotation
    exec.enabled: "false"
    admin.enabled: "true"  # Miglioramento: Disabilitazione dell'utente admin predefinito
    statusbadge.enabled: "true"
    url: https://argocd.internal.devopslab.pagopa.it
    oidc.config: |
      name: Azure
      issuer: https://login.microsoftonline.com/${tenant_id}/v2.0
      clientID: ${client_id}
      clientSecret: $oidc.azure.clientSecret
      requestedIDTokenClaims:
        groups:
          essential: true
        preferred_username:
          essential: true
        email:
          essential: true
      requestedScopes:
         - openid
         - profile
         - email

  rbac:
    policy.csv: |
      # Admin role: full access to all resources
      p, role:admin, applications, *, */*, allow
      p, role:admin, projects, *, *, allow
      p, role:admin, repositories, *, *, allow
      p, role:admin, clusters, *, *, allow
      p, role:admin, accounts, *, *, allow

      # Developer role: can manage applications but cannot delete them or modify infrastructure-level settings
      p, role:developer, applications, get, */*, allow
      p, role:developer, applications, create, */*, allow
      p, role:developer, applications, update, */*, allow
      p, role:developer, applications, sync, */*, allow
      p, role:developer, applications, override, */*, allow
      p, role:developer, projects, get, *, allow
      p, role:developer, clusters, get, *, allow
      p, role:developer, repositories, get, *, allow
      p, role:developer, accounts, get, *, allow

      # Reader role: can only view applications and logs, but cannot access secrets
      p, role:reader, applications, get, */*, allow
      p, role:reader, applications, logs, */*, allow
      p, role:reader, projects, get, *, allow

      # Explicitly deny access to secrets for the reader role
      p, role:reader, applications, get, */secrets, deny

      # Assign users to roles (example with a user ID)
      g, diego.lagosmorales@pagopa.it, role:admin

    scopes: "[preferred_username, email, groups]"


server:
  replicas: 1
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
    behavior:
      scaleDown:
        stabilizationWindowSeconds: 300
        policies:
          - type: Pods
            value: 1
            periodSeconds: 180
      scaleUp:
        stabilizationWindowSeconds: 60
        policies:
          - type: Pods
            value: 1
            periodSeconds: 60
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
  pdb:
    enabled: true
    minAvailable: 1
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi
  ingress:
    enabled: true
    ingressClassName: "nginx"
    hostname: argocd.internal.devopslab.pagopa.it
    annotations:
      nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
      nginx.ingress.kubernetes.io/ssl-passthrough: "true"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/grpc-backend: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/proxy-body-size: "100m"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "90"
    tls: false
    extraTls:
      - hosts:
          - argocd.internal.devopslab.pagopa.it
        secretName: argocd-internal-devopslab-pagopa-it

redis:
  enabled: true
  resources:
    limits:
      cpu: 200m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 64Mi
  service:
    port: 6379
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
  containerPorts:
    metrics: 9121
    redis: 6379
  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 15
    timeoutSeconds: 15
    successThreshold: 1
    failureThreshold: 5
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 15
    timeoutSeconds: 15
    successThreshold: 1
    failureThreshold: 5

controller:
  replicas: 1
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
    behavior:
      scaleDown:
        stabilizationWindowSeconds: 300
        policies:
          - type: Pods
            value: 1
            periodSeconds: 180
      scaleUp:
        stabilizationWindowSeconds: 60
        policies:
          - type: Pods
            value: 1
            periodSeconds: 60
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
  pdb:
    enabled: true
    minAvailable: 1
  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi

repoServer:
  replicas: 1
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
    behavior:
      scaleDown:
        stabilizationWindowSeconds: 300
        policies:
          - type: Pods
            value: 1
            periodSeconds: 180
      scaleUp:
        stabilizationWindowSeconds: 60
        policies:
          - type: Pods
            value: 1
            periodSeconds: 60
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
  pdb:
    enabled: true
    minAvailable: 1
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi

applicationSet:
  replicas: 1
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
    behavior:
      scaleDown:
        stabilizationWindowSeconds: 300
        policies:
          - type: Pods
            value: 1
            periodSeconds: 180
      scaleUp:
        stabilizationWindowSeconds: 60
        policies:
          - type: Pods
            value: 1
            periodSeconds: 60
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
  pdb:
    enabled: true
    minAvailable: 1
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi

dex:
  enabled: false
